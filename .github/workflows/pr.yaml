name: Deploy to dev
on:
  pull_request:
    types: [ready_for_review, opened]
  push:
    branches:
      - 'main'

env:
  GITHUB_USERNAME: x-access-token
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  build:
    if: github.event.pull_request.draft == false
    permissions:
      contents: "read"
      id-token: "write"
    name: Build with maven and docker
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
      - uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-
      - run: mvn -Dmaven.test.skip=true -B -e --settings .m2/maven-settings.xml clean install
      - uses: nais/docker-build-push@v0
        id: docker-push
        with:
          team: bidrag
          identity_provider: ${{ secrets.NAIS_WORKLOAD_IDENTITY_PROVIDER }}
          project_id: ${{ vars.NAIS_MANAGEMENT_PROJECT_ID }}
    outputs:
      image: ${{ steps.docker-push.outputs.image }}
      tag: ${{ steps.docker-push.outputs.tag }}

  run-tests:
    runs-on: ubuntu-latest
    name: Run tests
    needs: build
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
      - uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-
      - run: mvn -B -e --settings .m2/maven-settings.xml clean install

  deploy-main:
    runs-on: ubuntu-latest
    name: Deploy main
    needs: build
    steps:
      - uses: actions/checkout@v3
        with:
          path: deploy
      - name: Deploy main branch to dev-gcp
        uses: nais/deploy/actions/deploy@v1
        env:
          APIKEY: ${{ secrets.NAIS_DEPLOY_APIKEY }}
          CLUSTER: dev-gcp
          RESOURCE: deploy/.nais/nais.yaml
          VARS: deploy/.nais/main.yaml
          IMAGE: ${{ needs.build.outputs.image }}

  deploy-syntetisk:
    runs-on: ubuntu-latest
    name: Deploy syntetisk
    needs: build
    steps:
      - uses: actions/checkout@v3
        with:
          path: deploy
      - name: Deploy to dev-gcp
        uses: nais/deploy/actions/deploy@v1
        env:
          APIKEY: ${{ secrets.NAIS_DEPLOY_APIKEY }}
          CLUSTER: dev-gcp
          RESOURCE: deploy/.nais/nais.yaml
          VARS: deploy/.nais/syntetisk.yaml
          IMAGE: ${{ needs.build.outputs.image }}

  run_cucumber_tests-main:
    runs-on: ubuntu-latest
    name: Run cucumber tests main
    needs: deploy-main

    env:
      INGRESS_CUCUMBER: https://bidrag-cucumber-cloud.ekstern.dev.nav.no
      INGRESS_VEDTAK: https://bidrag-vedtak.intern.dev.nav.no

    steps:
      - run: |
          curl -H "Content-Type: application/json" -i \
                -H "Authorization: Basic ${{ secrets.BIDRAG_CUCUMBER_CLOUD_AUTH }}" \
               --request POST \
               --data '{"noContextPathForApps":["bidrag-vedtak"],"ingressesForApps":[
                   "${{ env.INGRESS_VEDTAK }}@tag:bidrag-vedtak"
                 ]}' \
               ${{ env.INGRESS_CUCUMBER }}/bidrag-cucumber-cloud/run | tee .cucumber-result
          cat .cucumber-result | grep HTTP/2 | grep -c 200 > /dev/null # fails if count is 0 (http status is not ok, aka http status code is not 200)